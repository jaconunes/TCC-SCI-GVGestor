unit udmDadosGVGESTOR;

interface

uses
  System.SysUtils, System.Classes, Data.FMTBcd, Data.SqlExpr, Datasnap.Provider,
  Data.DB, Datasnap.DBClient, udmConnectionGVGestor;

type
  TdmTabelas = class(TDataModule)
    tbAmbiente: TClientDataSet;
    dspAmbiente: TDataSetProvider;
    dsAmbiente: TSQLDataSet;
    tbCliente: TClientDataSet;
    dspCliente: TDataSetProvider;
    dsCliente: TSQLDataSet;
    tbFoto: TClientDataSet;
    dspFoto: TDataSetProvider;
    dsFoto: TSQLDataSet;
    tbImovel: TClientDataSet;
    dspImovel: TDataSetProvider;
    dsImovel: TSQLDataSet;
    tbItem: TClientDataSet;
    dspItem: TDataSetProvider;
    dsItem: TSQLDataSet;
    tbLocatario: TClientDataSet;
    dspLocatario: TDataSetProvider;
    dsLocatario: TSQLDataSet;
    tbProprietario: TClientDataSet;
    dspProprietario: TDataSetProvider;
    dsProprietario: TSQLDataSet;
    tbUsuario: TClientDataSet;
    dspUsuario: TDataSetProvider;
    dsUsuario: TSQLDataSet;
    tbVistoria: TClientDataSet;
    dspVistoria: TDataSetProvider;
    dsVistoria: TSQLDataSet;
    procedure DataModuleCreate(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  dmTabelas: TdmTabelas;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

procedure TdmTabelas.DataModuleCreate(Sender: TObject);
var
  I: Integer;
  wMSG: string;
  wObjName: string;
begin
  I := 0;
  wMSG := EmptyStr;
  wObjName := EmptyStr;
  if dmConnection.SQLConnectionGVGESTOR.Connected then
  begin
    for I := 0 to Self.ComponentCount-1 do
    begin
      if Self.Components[I] is TSQLQuery then
         TSQLQuery(Self.Components[I]).Close
      else
      if Self.Components[I] is TDataSet then
      try
        wObjName := TDataSet(Self.Components[I]).Name;
        if Self.Components[I] is TSQLDataSet then
           TSQLDataSet(Self.Components[I]).Open
        else
        if Self.Components[I] is TClientDataSet then
           TClientDataSet(Self.Components[I]).Open;
      except on E:Exception do
        wMSG := wMSG + 'Erro tentando acessar "' + Self.Name + '.' + wObjName + '".: ' + e.Message + #13;
      end;
    end;
  end
  else
     wMSG := 'Não é possível conectar as tabelas porque o banco não está conectando.';
  if wMSG <> EmptyStr then
    begin
       MessageDlg(wMSG, mtError, [mbOK], 0);
    end;

    dmTabela.tbPessoa.IndexDefs.Add('iCodigo', 'bdcodigo', [ixPrimary, ixUnique]);
    //dmTabela.tbPessoa.Open;
    dmTabela.tbPessoa.IndexFieldNames := 'bdcodigo';

    dmTabela.tbCidade.IndexDefs.Add('iCodigo', 'bdcodigo', [ixPrimary, ixUnique]);
    //dmTabela.tbCidade.Open;

    dmTabela.tbGenero.IndexDefs.Add('iCodigo', 'bdcodigo', [ixPrimary, ixUnique]);
    //dmTabela.tbGenero.Open;



end.
